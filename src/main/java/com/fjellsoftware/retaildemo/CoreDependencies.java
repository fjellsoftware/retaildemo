/*
 * Â© 2023. This work is openly licensed via CC0 1.0.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */

package com.fjellsoftware.retaildemo;

import com.fjellsoftware.retaildemo.authorizationcommon.HCaptchaVerifier;
import com.fjellsoftware.retaildemo.demo.DemoDomain;
import com.fjellsoftware.retaildemo.domain.*;
import com.fjellsoftware.retaildemo.util.FileUtils;
import com.zaxxer.hikari.HikariDataSource;
import io.loppi.graphql.*;
import io.loppi.graphql.schema.GraphQLArgumentDefinition;
import io.loppi.graphql.schema.GraphQLFieldDefinition;
import io.loppi.graphql.schema.GraphQLObjectType;
import io.loppi.graphql.schema.GraphQLScalarTypeCategory;
import com.fjellsoftware.retaildemo.autogenerated.orm.LoppiServiceRetailDemo;
import com.fjellsoftware.retaildemo.autogenerated.orm.MetaRetailDemo;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.List;

public class CoreDependencies {
    private final HikariDataSource dataSource;
    private final LoppiServiceRetailDemo loppiService;
    private final GraphQLService customerGraphQLServiceRaw;
    private final GraphQLService staffGraphQLServiceRaw;

    public static final MessageDigest sha256Digest = createSHA256MessageDigest();

    public CoreDependencies(ApplicationConfiguration configuration) {
        this.dataSource = createDataSource(configuration.getCredentialsDirectory());
        this.loppiService = new LoppiServiceRetailDemo(dataSource);
        this.customerGraphQLServiceRaw = createCustomerGraphQLService(loppiService);
        this.staffGraphQLServiceRaw = createStaffGraphQLService(loppiService);
    }

    private static MessageDigest createSHA256MessageDigest(){
        try {
            return MessageDigest.getInstance("SHA-256");
        } catch (NoSuchAlgorithmException e) {
            throw new ApplicationInternalException("Failed to initialize SHA-256 message digest.", e);
        }
    }

    private static final String database_secret_fileName = "database_secret";
    public static HikariDataSource createDataSource(String credentialsDirectory) {
        HikariDataSource dataSource = new HikariDataSource();
        dataSource.setDriverClassName("org.postgresql.Driver");
        dataSource.setJdbcUrl("jdbc:postgresql://localhost:5432/retail_demo");
        dataSource.setUsername("application");
        String databaseSecret = FileUtils.loadFirstLineFromFile(credentialsDirectory, database_secret_fileName);
        dataSource.setPassword(databaseSecret);
        dataSource.setConnectionTimeout(1000);
        dataSource.setMaximumPoolSize(20);
        return dataSource;
    }

    private GraphQLService createCustomerGraphQLService(LoppiServiceRetailDemo loppiService){
        return loppiService.createGraphQLService(createCustomerGraphQLSchemaConfiguration(loppiService.getMeta()),
                new GraphQLServiceConfigurationDefaultsVersionBeta());
    }

    private GraphQLService createStaffGraphQLService(LoppiServiceRetailDemo loppiService){

        return loppiService.createGraphQLService(createStaffGraphQLSchemaConfiguration(loppiService.getMeta()),
                new GraphQLServiceConfigurationDefaultsVersionBeta());
    }

    private LoppiGraphQLSchemaConfiguration createCustomerGraphQLSchemaConfiguration(MetaRetailDemo metaRetailDemo){
        List<GraphQLTypeConfiguration<?>> typeConfigurations = List.of(
                ProductDomain.createCustomerApiTypeConfiguration(metaRetailDemo.getProductMeta()),
                OrderDomain.createCustomerApiTypeConfiguration(metaRetailDemo.getPurchaseOrderMeta()),
                OrderLineDomain.createCustomerApiTypeConfiguration(metaRetailDemo.getOrderLineMeta()),
                UserDomain.createCustomerApiTypeConfiguration(metaRetailDemo.getUserAccountMeta())
        );
        List<GraphQLFieldDefinition> customMutations = List.of(
                LoginSessionDomain.createLoginCustomMutationDefinition(),
                LoginSessionDomain.createSignOutCustomMutationDefinition(),
                UserDomain.createUpdatePasswordCustomMutationDefinition(),
                UserDomain.createSignUpCustomMutationDefiniton(),
                DemoDomain.upgradeToStaffCustomMutationDefinition(),
                DemoDomain.downGradeToCustomerCustomMutationDefiniton(),
                createVerifyCaptchaMutationDefinition(),
                createGetBcryptSaltMutationDefinition());
        return new LoppiGraphQLSchemaConfiguration(typeConfigurations, customMutations);
    }

    private GraphQLFieldDefinition createVerifyCaptchaMutationDefinition(){
        GraphQLArgumentDefinition tokenArgument = GraphQLArgumentDefinition.builder().setName("token")
                .setType(GraphQLScalarTypeCategory.String).setNotNull(true).build();
        return GraphQLFieldDefinition.builder().setName("verifyCaptcha")
                .setDescription(String.format("Checks with a third party if the submitted token is a valid captcha response. " +
                        "If successful sets cookie \"%s\" and returns the token. Does no mutations", HCaptchaVerifier.H_CAPTCHA_TOKEN_COOKIE_NAME))
                .setType(UUIDTokenResult.getGraphQLTypeDefinition())
                .setNotNull(true)
                .setArguments(List.of(tokenArgument))
                .build();
    }

    public static final String GET_BCRYPT_SALT_FIELD_NAME = "getBcryptSalt";
    private GraphQLFieldDefinition createGetBcryptSaltMutationDefinition(){
        GraphQLFieldDefinition saltField = GraphQLFieldDefinition.builder().setName("salt")
                .setNotNull(true).setType(GraphQLScalarTypeCategory.String).build();
        GraphQLObjectType saltResult = GraphQLObjectType.builder().setName("SaltResult")
                .addField(saltField).build();
        GraphQLArgumentDefinition usernameArgument = GraphQLArgumentDefinition.builder().setName("username")
                .setType(GraphQLScalarTypeCategory.String).setNotNull(true).build();
        return GraphQLFieldDefinition.builder().setName(GET_BCRYPT_SALT_FIELD_NAME)
                .setDescription("Returns the salt that should be used with bcrypt when hashing the password " +
                        "client-side when signing up or logging in. Does no mutations.")
                .setType(saltResult)
                .setNotNull(true)
                .addArgument(usernameArgument)
                .build();
    }

    private LoppiGraphQLSchemaConfiguration createStaffGraphQLSchemaConfiguration(MetaRetailDemo metaRetailDemo){
        List<GraphQLTypeConfiguration<?>> typeConfigurations = List.of(
                ProductDomain.createStaffApiTypeConfiguration(metaRetailDemo.getProductMeta()),
                OrderDomain.createStaffApiTypeConfiguration(metaRetailDemo.getPurchaseOrderMeta()),
                OrderLineDomain.createStaffApiTypeConfiguration(metaRetailDemo.getOrderLineMeta()),
                UserDomain.createStaffApiTypeConfiguration(metaRetailDemo.getUserAccountMeta()),
                LoginSessionDomain.createStaffApiTypeConfiguration(metaRetailDemo.getLoginSessionMeta())
        );
        return new LoppiGraphQLSchemaConfiguration(typeConfigurations, List.of());
    }

    public HikariDataSource getDataSource() {
        return dataSource;
    }

    public LoppiServiceRetailDemo getLoppiService() {
        return loppiService;
    }

    public GraphQLService getCustomerGraphQLServiceRaw() {
        return customerGraphQLServiceRaw;
    }

    public GraphQLService getStaffGraphQLServiceRaw() {
        return staffGraphQLServiceRaw;
    }


}
