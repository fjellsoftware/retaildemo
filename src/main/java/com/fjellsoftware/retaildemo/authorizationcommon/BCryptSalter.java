/*
 * Â© 2023. This work is openly licensed via CC0 1.0.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */

package com.fjellsoftware.retaildemo.authorizationcommon;

import com.fjellsoftware.retaildemo.autogenerated.graphql.customer.SaltResult;
import io.loppi.graphql.GraphQLExecutableMutationField;
import io.loppi.graphql.GraphQLValidationException;
import com.fjellsoftware.retaildemo.autogenerated.graphql.customer.CustomerGraphQLService;
import com.fjellsoftware.retaildemo.autogenerated.graphql.customer.GetBcryptSaltMutationField;
import com.fjellsoftware.retaildemo.autogenerated.graphql.customer.GetBcryptSaltMutationInput;
import com.fjellsoftware.bcryptclientsalt.BCryptClientSalt;

import java.util.List;

public class BCryptSalter {
    private final CustomerGraphQLService customerGraphQLService;
    private final String hostName;

    public BCryptSalter(
            CustomerGraphQLService customerGraphQLService, String hostName) {
        this.customerGraphQLService = customerGraphQLService;
        this.hostName = hostName;
    }

    private static final int MAX_USERNAME_LENGTH = 200;
    public MutationFieldAndCookies handleGraphQLGetBcryptSalt(
            GetBcryptSaltMutationField getBcryptSaltField) throws GraphQLValidationException {
        GetBcryptSaltMutationInput input = getBcryptSaltField.input();
        String username = input.username();
        if(username.length() > MAX_USERNAME_LENGTH){
            throw new GraphQLValidationException(String.format("Username too long. Maximum length %s, found: [%s], " +
                    "username: [%s].", MAX_USERNAME_LENGTH, username.length(), username));
        }
        String salt = BCryptClientSalt.fromServiceIdentifierAndUsername(hostName, username);
        GraphQLExecutableMutationField executableMutationField = customerGraphQLService.resolveMutationField(
                new SaltResult(salt), getBcryptSaltField);
        return new MutationFieldAndCookies(executableMutationField, List.of());
    }
}
