package com.fjellsoftware.retaildemo.autogenerated.graphql.staff;
import io.loppi.graphql.*;
import com.fjellsoftware.retaildemo.autogenerated.orm.RetailDemoRowToMutate;
import io.loppi.graphql.integration.orm.GraphQLResolvedWithRowsMutationField;
import org.jetbrains.annotations.NotNull;
import com.fjellsoftware.javafunctionalutils.NullUtils;
import java.util.List;

/////////////////////
/// AUTOGENERATED ///
/////////////////////

public class StaffGraphQLService {
    private final GraphQLServiceForGeneratedClassesInternal<StaffRequest> graphQLServiceWithDatabaseInternal;
    private final GraphQLService graphQLService;

    public StaffGraphQLService(@NotNull GraphQLService graphQLService){
        NullUtils.requireAllNonNull(graphQLService);
        this.graphQLServiceWithDatabaseInternal = new GraphQLServiceForGeneratedClassesInternal<>(graphQLService, StaffRequest.class);
        this.graphQLService = graphQLService;
    }

    public @NotNull StaffRequest parseAndValidate(@NotNull String body) throws GraphQLRequestException {
        NullUtils.requireAllNonNull(body);
        return graphQLServiceWithDatabaseInternal.parseAndValidate(body);
    }

    public @NotNull GraphQLExecutionResult executeQuery(@NotNull List<GraphQLExecutableQueryField> graphQLQueryDocument){
        NullUtils.requireAllNonNullIterable(graphQLQueryDocument);
        return graphQLService.executeQuery(graphQLQueryDocument);
    }

    public @NotNull GraphQLExecutionResult executeMutation(@NotNull List<GraphQLExecutableMutationField> mutationFields){
        NullUtils.requireAllNonNullIterable(mutationFields);
        return graphQLService.executeMutation(mutationFields);
    }

    

}