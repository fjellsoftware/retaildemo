package com.fjellsoftware.retaildemo.autogenerated.orm;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

import java.beans.ConstructorProperties;
import com.fjellsoftware.javafunctionalutils.NullUtils;
import io.loppi.orm.includablevalues.*;

/////////////////////
/// AUTOGENERATED ///
/////////////////////

public final class ProductToInsert implements ProductReference, RetailDemoRowToInsert {
    private IncludableString stockCode = IncludableString.notIncluded();
    private String description;
    private BigDecimal currentUnitPrice;
    private IncludableOffsetDateTime createdAt = IncludableOffsetDateTime.notIncluded();
    private IncludableOffsetDateTime lastUpdatedAt = IncludableOffsetDateTime.notIncluded();


    @ConstructorProperties({"description", "currentUnitPrice"})
    public ProductToInsert(
            @NotNull String description, @NotNull BigDecimal currentUnitPrice){
        NullUtils.requireAllNonNull(description, currentUnitPrice);
        this.description = description;
        this.currentUnitPrice = currentUnitPrice;
    }
    public @NotNull IncludableString getStockCode(){
        return stockCode;
    }

    public void setStockCode(@NotNull IncludableString stockCode){
        Objects.requireNonNull(stockCode);
        this.stockCode = stockCode;
    }

    public void setStockCodeIncludableOf(@NotNull String stockCode){
        Objects.requireNonNull(stockCode);
        this.stockCode = IncludableString.of(stockCode);
    }

    public @NotNull String getDescription(){
        return description;
    }

    public void setDescription(@NotNull String description){
        Objects.requireNonNull(description);
        this.description = description;
    }

    public @NotNull BigDecimal getCurrentUnitPrice(){
        return currentUnitPrice;
    }

    public void setCurrentUnitPrice(@NotNull BigDecimal currentUnitPrice){
        Objects.requireNonNull(currentUnitPrice);
        this.currentUnitPrice = currentUnitPrice;
    }

    public @NotNull IncludableOffsetDateTime getCreatedAt(){
        return createdAt;
    }

    public void setCreatedAt(@NotNull IncludableOffsetDateTime createdAt){
        Objects.requireNonNull(createdAt);
        this.createdAt = createdAt;
    }

    public void setCreatedAtIncludableOf(@NotNull OffsetDateTime createdAt){
        Objects.requireNonNull(createdAt);
        this.createdAt = IncludableOffsetDateTime.of(createdAt);
    }

    public @NotNull IncludableOffsetDateTime getLastUpdatedAt(){
        return lastUpdatedAt;
    }

    public void setLastUpdatedAt(@NotNull IncludableOffsetDateTime lastUpdatedAt){
        Objects.requireNonNull(lastUpdatedAt);
        this.lastUpdatedAt = lastUpdatedAt;
    }

    public void setLastUpdatedAtIncludableOf(@NotNull OffsetDateTime lastUpdatedAt){
        Objects.requireNonNull(lastUpdatedAt);
        this.lastUpdatedAt = IncludableOffsetDateTime.of(lastUpdatedAt);
    }

}