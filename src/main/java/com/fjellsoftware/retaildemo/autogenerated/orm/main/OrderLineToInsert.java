package com.fjellsoftware.retaildemo.autogenerated.orm.main;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

import java.beans.ConstructorProperties;
import com.fjellsoftware.javafunctionalutils.NullUtils;
import io.loppi.orm.includablevalues.*;

/////////////////////
/// AUTOGENERATED ///
/////////////////////

public final class OrderLineToInsert implements OrderLineReference, RetailDemoRowToInsert {
    private PurchaseOrderReference purchaseOrder;
    private int quantity;
    private BigDecimal unitPrice;
    private ProductReference product;
    private IncludableOffsetDateTime createdAt = IncludableOffsetDateTime.notIncluded();


    @ConstructorProperties({"purchaseOrder", "quantity", "unitPrice", "product"})
    public OrderLineToInsert(
            @NotNull PurchaseOrderReference purchaseOrder, @NotNull int quantity, @NotNull BigDecimal unitPrice, 
            @NotNull ProductReference product){
        NullUtils.requireAllNonNull(unitPrice, product, quantity, purchaseOrder);
        this.purchaseOrder = purchaseOrder;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.product = product;
    }
    public @NotNull PurchaseOrderReference getPurchaseOrder(){
        return purchaseOrder;
    }

    public void setPurchaseOrder(@NotNull PurchaseOrderReference purchaseOrder){
        Objects.requireNonNull(purchaseOrder);
        this.purchaseOrder = purchaseOrder;
    }

    public @NotNull int getQuantity(){
        return quantity;
    }

    public void setQuantity(@NotNull int quantity){
        Objects.requireNonNull(quantity);
        this.quantity = quantity;
    }

    public @NotNull BigDecimal getUnitPrice(){
        return unitPrice;
    }

    public void setUnitPrice(@NotNull BigDecimal unitPrice){
        Objects.requireNonNull(unitPrice);
        this.unitPrice = unitPrice;
    }

    public @NotNull ProductReference getProduct(){
        return product;
    }

    public void setProduct(@NotNull ProductReference product){
        Objects.requireNonNull(product);
        this.product = product;
    }

    public @NotNull IncludableOffsetDateTime getCreatedAt(){
        return createdAt;
    }

    public void setCreatedAt(@NotNull IncludableOffsetDateTime createdAt){
        Objects.requireNonNull(createdAt);
        this.createdAt = createdAt;
    }

    public void setCreatedAtIncludableOf(@NotNull OffsetDateTime createdAt){
        Objects.requireNonNull(createdAt);
        this.createdAt = IncludableOffsetDateTime.of(createdAt);
    }

}