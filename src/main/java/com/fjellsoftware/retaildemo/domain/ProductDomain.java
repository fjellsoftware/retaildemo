/*
 * Â© 2023. This work is openly licensed via CC0 1.0.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */

package com.fjellsoftware.retaildemo.domain;

import com.fjellsoftware.retaildemo.autogenerated.orm.*;
import io.loppi.graphql.*;
import io.loppi.orm.*;
import io.loppi.graphql.schema.GraphQLErrorTypeCategory;
import io.loppi.includablevalues.*;
import io.loppi.includablevalues.IntValue;
import io.loppi.orm.metamodel.Attribute;
import io.loppi.orm.query.DatabaseQuery;
import com.fjellsoftware.javafunctionalutils.ImmutableList;
import com.fjellsoftware.javafunctionalutils.ImmutableSet;
import com.fjellsoftware.retaildemo.ApplicationInternalException;
import com.fjellsoftware.retaildemo.autogenerated.graphql.staff.ProductInsertMutationField;
import com.fjellsoftware.retaildemo.autogenerated.graphql.staff.ProductUpdateMutationField;

import java.nio.charset.CharsetEncoder;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.*;

public class ProductDomain {
    private final ImmutableSet<String> allowedProductWords;
    private final ImmutableSet<Integer> originalDatasetIds;
    private final CharsetEncoder asciiEncoder = StandardCharsets.US_ASCII.newEncoder();

    public ProductDomain(ProductMeta productMeta, LoppiServiceRetailDemo loppiService) {
        DatabaseServiceJDBCRetailDemo databaseServiceJDBC = loppiService.getDatabaseServiceJDBC();
        OffsetDateTime startOf2022 = OffsetDateTime.of(2022, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC);
        DatabaseQuery<ProductResult> query = databaseServiceJDBC
                .createQueryBuilder(productMeta.getEntityMetadata().getQueryResultClass(), 100_000)
                .where().lt(productMeta.createdAt, startOf2022).end()
                .includeScalar(productMeta.productId)
                .includeScalar(productMeta.description)
                .build();
        try {
            ImmutableList<ProductResult> productResults = databaseServiceJDBC.executeQuery(query).deserialize();

            Set<String> allowedProductWordsTmp = new HashSet<>();
            Set<Integer> originalDatasetIdsTmp = new HashSet<>();

            for (ProductResult productResult : productResults) {
                int id = ((IntValue) productResult.getProductId()).getValue();
                originalDatasetIdsTmp.add(id);
                String description = ((StringValue) productResult.getDescription()).getValue();
                String[] words = description.split(" ");
                allowedProductWordsTmp.addAll(Arrays.asList(words));
            }
            this.allowedProductWords = new ImmutableSet<>(allowedProductWordsTmp);
            this.originalDatasetIds = new ImmutableSet<>(originalDatasetIdsTmp);

        } catch (PostgresExecutionException e) {
            throw new ApplicationInternalException("Failed to initialize valid product descriptions and ids.", e);
        }
    }



    public static GraphQLTypeConfiguration<ProductResult>
    createCustomerApiTypeConfiguration(ProductMeta productMeta){
        GraphQLDatabaseQueryConfiguration<ProductResult> queryConfiguration =
                new GraphQLDatabaseQueryConfiguration<>(
                Set.of(
                        productMeta.productId,
                        productMeta.description,
                        productMeta.stockCode,
                        productMeta.currentUnitPrice))
                .setIncludePluralRootField(true)
                .setPluralFieldDescription("Returns the available products.")
                .setIncludeOrderBy(Set.of(
                        productMeta.stockCode,
                        productMeta.productId,
                        productMeta.currentUnitPrice,
                        productMeta.createdAt
                ))
                .setIncludeWhere(Set.of(
                        productMeta.productId,
                        productMeta.currentUnitPrice,
                        productMeta.description,
                        productMeta.stockCode), true);
        return new GraphQLTypeConfiguration<>(productMeta.getEntityMetadata())
                .setIncludeQuery(queryConfiguration);
    }



    public static GraphQLTypeConfiguration<ProductResult> createStaffApiTypeConfiguration(ProductMeta productMeta) {
        Set<Attribute<ProductResult, ? extends IncludableValue>> outputAttributes = Set.of(
                productMeta.productId, productMeta.description, productMeta.createdAt, productMeta.stockCode,
                productMeta.lastUpdatedAt, productMeta.currentUnitPrice);
        // Used for getting product for order lines
        // To view products normally, use customer api.
        GraphQLDatabaseQueryConfiguration<ProductResult> queryConfiguration =
                new GraphQLDatabaseQueryConfiguration<>(outputAttributes).setIncludePluralRootField(false);
        Set<Attribute<ProductResult, ? extends IncludableValue>> insertAttributes = Set.of(
                productMeta.description, productMeta.currentUnitPrice);
        HashSet<Attribute<ProductResult, ? extends IncludableValue>> updateAttributes = new HashSet<>(insertAttributes);
        updateAttributes.add(productMeta.productId);
        GraphQLMutationsConfiguration<ProductResult> mutationConfiguration = new GraphQLMutationsConfiguration<>(outputAttributes)
                .setIncludeInsert(insertAttributes, "productInsert", "Create a new product available for purchase.")
                .setIncludeUpdate(updateAttributes, "productUpdate", "Update an existing product.");
        return new GraphQLTypeConfiguration<>(productMeta.getEntityMetadata())
                .setIncludeQuery(queryConfiguration)
                .setIncludeMutations(mutationConfiguration);
    }

    public void handleProductInsert(ProductInsertMutationField databaseMutationField) throws GraphQLRequestException {
        ProductToInsert input = databaseMutationField.input();
        checkValidDescription(input.getDescription());
        input.setStockCodeIncludableOf(UUID.randomUUID().toString());
    }

    public void handleProductUpdate(ProductUpdateMutationField databaseMutationField) throws GraphQLRequestException {
        ProductToUpdate input = databaseMutationField.input();
        if (input.getDescription() instanceof StringValue stringValue) {
            String value = stringValue.getValue();
            checkValidDescription(value);
        }
        if(originalDatasetIds.contains(input.getWhereProductId())){
            throw new GraphQLRequestException(String.format("Not allowed to update the main dataset in this demo. " +
                    "If you want to update a product, create a new one first and then update that one. Found id: [%s]",
                    input.getWhereProductId()),
                    GraphQLErrorTypeCategory.OTHER);
        }
    }

    private static final int maxDescriptionLength = 25;
    private void checkValidDescription(String description) throws GraphQLRequestException {
        if(description.length() > maxDescriptionLength){
            throw new GraphQLRequestException(String.format("Description is too long. " +
                    "Max length is [%s]. Description: [%s]", maxDescriptionLength, description), GraphQLErrorTypeCategory.OTHER);
        }
        if (!asciiEncoder.canEncode(description)) {
            throw new GraphQLRequestException(String.format("Invalid description, description can only contain " +
                    "ascii characters. Description: [%s]", description), GraphQLErrorTypeCategory.OTHER);
        }
        String[] words = description.split(" ");
        for (String word : words) {
            if(!allowedProductWords.contains(word)){
                throw new GraphQLRequestException(String.format("Invalid description, description can only contain " +
                        "words and phrases used by already existing products. Found word: [%s] in description: [%s].",
                        word, description), GraphQLErrorTypeCategory.OTHER);
            }
        }
    }
}
