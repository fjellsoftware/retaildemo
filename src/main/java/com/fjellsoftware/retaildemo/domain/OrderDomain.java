/*
 * Â© 2023. This work is openly licensed via CC0 1.0.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */

package com.fjellsoftware.retaildemo.domain;

import com.fjellsoftware.javafunctionalutils.ImmutableList;
import com.fjellsoftware.javafunctionalutils.ImmutableSet;
import com.fjellsoftware.javafunctionalutils.opt.Opt;
import com.fjellsoftware.retaildemo.ApplicationInternalException;
import com.fjellsoftware.retaildemo.authorizationcommon.MutationFieldAndCookies;
import com.fjellsoftware.retaildemo.authorizationcommon.userinfo.AuthenticatedUser;
import com.fjellsoftware.retaildemo.authorizationcommon.userinfo.UserInfo;
import com.fjellsoftware.retaildemo.autogenerated.graphql.customer.OrderInsertMutationInput;
import com.fjellsoftware.retaildemo.autogenerated.graphql.customer.OrdersQueryField;
import com.fjellsoftware.retaildemo.autogenerated.graphql.customer.PlaceOrderMutationField;
import com.fjellsoftware.retaildemo.autogenerated.graphql.staff.OrderStatusBatchUpdateMutationField;
import com.fjellsoftware.retaildemo.autogenerated.orm.*;
import io.loppi.graphql.GraphQLExecutableQueryField;
import io.loppi.graphql.GraphQLRequestException;
import io.loppi.graphql.GraphQLValidationException;
import io.loppi.graphql.integration.orm.table.GraphQLTableConfiguration;
import io.loppi.graphql.integration.orm.table.mutation.GraphQLInsertMutationConfiguration;
import io.loppi.graphql.integration.orm.table.mutation.GraphQLTableMutationsConfiguration;
import io.loppi.graphql.integration.orm.table.mutation.GraphQLUpdateMutationConfiguration;
import io.loppi.graphql.integration.orm.table.query.GraphQLTablePluralQueryConfiguration;
import io.loppi.graphql.integration.orm.table.query.GraphQLTableQueriesConfiguration;
import io.loppi.graphql.integration.orm.table.query.argumentbuilder.GraphQLTableQueryArgumentBuilder;
import io.loppi.graphql.schema.GraphQLErrorTypeCategory;
import io.loppi.orm.PostgresExecutionException;
import io.loppi.orm.includablevalues.BigDecimalValue;
import io.loppi.orm.includablevalues.IncludableString;
import io.loppi.orm.includablevalues.IntValue;
import io.loppi.orm.includablevalues.StringValue;
import io.loppi.orm.metamodel.attribute.Attribute;
import io.loppi.orm.query.QueryExecutionPluralResult;
import io.loppi.orm.query.TableQuery;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.*;

import static com.fjellsoftware.retaildemo.domain.OrderStatusEnum.IN_PROGRESS;
import static com.fjellsoftware.retaildemo.domain.OrderStatusEnum.SHIPPED;

public class OrderDomain {

    private final PurchaseOrderMeta purchaseOrderMeta;
    private final UserAccountMeta userAccountMeta;
    private final ProductMeta productMeta;
    private final RetailDemoDatabaseService databaseService;
    private final ImmutableSet<Integer> originalDatasetIds;

    public OrderDomain(RetailDemoORMService loppiService) {
        this.databaseService = loppiService.getDatabaseServiceJDBC();
        RetailDemoMeta meta = loppiService.getMeta();
        this.purchaseOrderMeta = meta.getPurchaseOrderMeta();
        this.userAccountMeta = meta.getUserAccountMeta();
        this.productMeta = meta.getProductMeta();

        RetailDemoDatabaseService databaseServiceJDBC = loppiService.getDatabaseServiceJDBC();
        OffsetDateTime startOf2022 = OffsetDateTime.of(2022, 1, 1, 0, 0, 0, 0, ZoneOffset.UTC);
        TableQuery<PurchaseOrderResult> query = databaseServiceJDBC.createTableQueryBuilder(purchaseOrderMeta.getEntityMetadata(), 100_000)
                .where().lt(purchaseOrderMeta.createdAt, startOf2022).end()
                .includeScalar(purchaseOrderMeta.purchaseOrderId)
                .build();
        try {
            ImmutableList<PurchaseOrderResult> orderResults = databaseServiceJDBC.executeTableQuery(query).deserialize();
            Set<Integer> originalDatasetIdsTmp = new HashSet<>();
            for (PurchaseOrderResult orderResult : orderResults) {
                int id = ((IntValue) orderResult.getPurchaseOrderId()).value();
                originalDatasetIdsTmp.add(id);
            }
            this.originalDatasetIds = new ImmutableSet<>(originalDatasetIdsTmp);
        } catch (PostgresExecutionException e) {
            throw new ApplicationInternalException("Failed to initialize valid purchaseOrder ids for initial dataset.", e);
        }
    }

    private final static String apiBaseName = "Order";
    private final static String apiPluralName = "Orders";

    public static GraphQLTableConfiguration<PurchaseOrderResult>
    createCustomerApiTableConfiguration(PurchaseOrderMeta purchaseOrderMeta){
        Set<Attribute<PurchaseOrderResult, ?>> outputAttributes =
                Set.of(purchaseOrderMeta.purchaseOrderId,
                        purchaseOrderMeta.orderStatus,
                        purchaseOrderMeta.createdAt,
                        purchaseOrderMeta.orderLines);

        GraphQLTablePluralQueryConfiguration<PurchaseOrderResult> pluralQueryConfiguration =
                new GraphQLTablePluralQueryConfiguration<PurchaseOrderResult>()
                .setIncludeField(true)
                .setIncludeWhere(Set.of(purchaseOrderMeta.purchaseOrderId))
                .setIncludeOrderBy(Set.of(purchaseOrderMeta.createdAt))
                .setPluralFieldDescription("Returns orders registered for currently logged in user.");
        GraphQLTableQueriesConfiguration<PurchaseOrderResult> queriesConfiguration =
                new GraphQLTableQueriesConfiguration<>(outputAttributes)
                        .setIncludePluralTableQuery(pluralQueryConfiguration);

        GraphQLInsertMutationConfiguration<PurchaseOrderResult> insertMutationConfiguration =
                new GraphQLInsertMutationConfiguration<>(Set.of(
                purchaseOrderMeta.orderLines,
                purchaseOrderMeta.countryId,
                purchaseOrderMeta.address,
                purchaseOrderMeta.name,
                purchaseOrderMeta.phoneNumber))
                .setIncludeField(true)
                .setFieldNameOverride("placeOrder")
                .setFieldDescription("Place an order for purchase. Set customerId to associate " +
                        "order with logged in account. Maximum order lines: 50.");
        GraphQLTableMutationsConfiguration<PurchaseOrderResult> mutationConfiguration =
                new GraphQLTableMutationsConfiguration<>(outputAttributes)
                        .setIncludeInsert(insertMutationConfiguration);

        return new GraphQLTableConfiguration<>(purchaseOrderMeta.getEntityMetadata())
                .setIncludeQueries(queriesConfiguration)
                .setIncludeMutations(mutationConfiguration)
                .setTypeName("Order", "Orders");
    }

    public GraphQLExecutableQueryField applyAccessControlCustomerQuery(
            OrdersQueryField ordersQueryField, UserInfo userInfo) throws GraphQLRequestException {
        //User should only be able to look at own orders.
        if(!(userInfo instanceof AuthenticatedUser authenticatedUser)){
            throw GraphQLRequestException.createNotLoggedIn();
        }
        return GraphQLTableQueryArgumentBuilder.from(ordersQueryField)
                .getNestedOrIncludeForWhere(purchaseOrderMeta.customer)
                .where().eq(userAccountMeta.userAccountId, authenticatedUser.userId())
                .end().end1().build();
    }

    private static final String VALID_ADDRESS = "123 Maple Street, Anytown";
    private static final String VALID_NAME = "John Doe";
    private static final String VALID_PHONE_NUMBER = "+44 808 157 0192";
    public MutationFieldAndCookies handlePlaceOrder(UserInfo userInfo, PlaceOrderMutationField placeOrderMutationField) throws GraphQLRequestException {
        OrderInsertMutationInput input = placeOrderMutationField.input();
        PurchaseOrderToInsert purchaseOrderToInsert = input.purchaseOrderToInsert();

        if(!purchaseOrderToInsert.getAddress().equals(VALID_ADDRESS)){
            throw new GraphQLValidationException("In this demo the address must be: \"123 Maple Street, Anytown\" on order placements.");
        }
        if(!purchaseOrderToInsert.getName().equals(VALID_NAME)){
            throw new GraphQLValidationException("In this demo the name must be: \"John Doe\" on order placements.");
        }
        if(!purchaseOrderToInsert.getPhoneNumber().equals(VALID_PHONE_NUMBER)){
            throw new GraphQLValidationException("In this demo the phone number must be: \"+44 808 157 0192\" on order placements.");
        }
        if(userInfo instanceof AuthenticatedUser authenticatedUser){
            purchaseOrderToInsert.setCustomerIncludableOf(new RetailDemoIdReferenceUUID(authenticatedUser.userId()));
        }

        ImmutableList<OrderLineToInsert> orderLinesToInsert = input.orderLinesToInsert();
        if(orderLinesToInsert.isEmpty()){
            throw new GraphQLRequestException("Order placement must have at least one order line.", GraphQLErrorTypeCategory.OTHER);
        }
        if (orderLinesToInsert.size() > 50) {
            throw new GraphQLRequestException("Request too big.", GraphQLErrorTypeCategory.OTHER);
        }

        Map<Integer, BigDecimal> productIdPrices = new HashMap<>();
        for (OrderLineToInsert orderLineToInsert : orderLinesToInsert) {
            ProductReference productReference = orderLineToInsert.getProduct();
            if(!(productReference instanceof RetailDemoIdReferenceInt referenceInt)){
                throw GraphQLRequestException.createInternal();
            }
            int id = referenceInt.getId();
            BigDecimal unitPrice = orderLineToInsert.getUnitPrice();
            productIdPrices.put(id, unitPrice);
        }
        TableQuery<ProductResult> query = databaseService
                .createTableQueryBuilder(productMeta.getEntityMetadata(), productIdPrices.size())
                .where().intIn(productMeta.productId, new ArrayList<>(productIdPrices.keySet())).end()
                .includeScalar(productMeta.productId)
                .includeScalar(productMeta.currentUnitPrice)
                .build();
        QueryExecutionPluralResult<ProductResult> executionResult;
        try {
            executionResult = databaseService.executeTableQuery(query);
        } catch (PostgresExecutionException e) {
            throw GraphQLRequestException.createInternal(e);
        }
        ImmutableList<ProductResult> productResults = executionResult.deserialize();
        for (ProductResult productResult : productResults) {
            int id = ((IntValue) productResult.getProductId()).value();
            BigDecimal userInputPrice = productIdPrices.get(id);
            BigDecimal currentActualPrice = ((BigDecimalValue) productResult.getCurrentUnitPrice()).value();
            if(!currentActualPrice.equals(userInputPrice)){
                throw new GraphQLRequestException(String.format("Invalid unit price for product id: [%s]. " +
                        "Current price is [%s], but price submitted was [%s].", id, currentActualPrice, userInputPrice),
                        GraphQLErrorTypeCategory.APPLICATION_VALIDATION);
            }
        }
        return new MutationFieldAndCookies(placeOrderMutationField, List.of());
    }

    public static GraphQLTableConfiguration<PurchaseOrderResult> createStaffApiTableConfiguration(
            PurchaseOrderMeta purchaseOrderMeta) {
        GraphQLTablePluralQueryConfiguration<PurchaseOrderResult> pluralQueryConfiguration =
                new GraphQLTablePluralQueryConfiguration<PurchaseOrderResult>()
                .setIncludeField(true)
                .setIncludeOrderBy(Set.of(purchaseOrderMeta.purchaseOrderId, purchaseOrderMeta.createdAt,
                        purchaseOrderMeta.lastUpdatedAt))
                .setIncludeWhere(Set.of(purchaseOrderMeta.purchaseOrderId, purchaseOrderMeta.createdAt,
                        purchaseOrderMeta.lastUpdatedAt, purchaseOrderMeta.customerId, purchaseOrderMeta.orderStatus))
                .setPluralFieldDescription("Returns all orders from all users.");
        GraphQLTableQueriesConfiguration<PurchaseOrderResult> queriesConfiguration =
                new GraphQLTableQueriesConfiguration<>(Set.of(purchaseOrderMeta.purchaseOrderId,
                        purchaseOrderMeta.orderStatus, purchaseOrderMeta.customer, purchaseOrderMeta.phoneNumber,
                        purchaseOrderMeta.address, purchaseOrderMeta.name,
                        purchaseOrderMeta.createdAt, purchaseOrderMeta.lastUpdatedAt, purchaseOrderMeta.orderLines))
                        .setIncludePluralTableQuery(pluralQueryConfiguration);

        GraphQLUpdateMutationConfiguration<PurchaseOrderResult> updateMutationConfiguration =
                new GraphQLUpdateMutationConfiguration<>(purchaseOrderMeta,
                        Set.of(purchaseOrderMeta.purchaseOrderId, purchaseOrderMeta.orderStatus));
        Opt<String> batchDescription = Opt.of(String.format("Updates the order status of a list of orders. " +
                        "Valid values are: [%s, %s]", SHIPPED, IN_PROGRESS));
        GraphQLTableMutationsConfiguration<PurchaseOrderResult> mutationConfiguration =
                new GraphQLTableMutationsConfiguration<>(Set.of(purchaseOrderMeta.purchaseOrderId,
                        purchaseOrderMeta.orderStatus))
                .setIncludeUpdate(updateMutationConfiguration)
                        .setIncludeBatchMutationField(Opt.of("orderStatusBatchUpdate"), batchDescription);

        return new GraphQLTableConfiguration<>(purchaseOrderMeta.getEntityMetadata())
                .setIncludeQueries(queriesConfiguration)
                .setIncludeMutations(mutationConfiguration)
                .setTypeName(apiBaseName, apiPluralName);
    }

    public void checkStaffUpdateOrderStatuses(
            OrderStatusBatchUpdateMutationField databaseMutation) throws GraphQLRequestException {
        if (databaseMutation.purchaseOrdersToUpdate().size() > 50) {
            throw new GraphQLRequestException("Request too big.", GraphQLErrorTypeCategory.OTHER);
        }
        for (PurchaseOrderToUpdate purchaseOrderToUpdate : databaseMutation.purchaseOrdersToUpdate()) {
            IncludableString includableOrderStatusName = purchaseOrderToUpdate.getOrderStatus();
            if(!(includableOrderStatusName instanceof StringValue stringValue)){
                throw new GraphQLRequestException(String.format("Missing updated status for order id: [%s].",
                        purchaseOrderToUpdate.getWherePurchaseOrderId()), GraphQLErrorTypeCategory.OTHER);
            }
            String orderStatusName = stringValue.value();
            OrderStatusEnum orderStatus;
            try {
                orderStatus = OrderStatusEnum.valueOf(orderStatusName);
            } catch (IllegalArgumentException e) {
                throw new GraphQLRequestException(String.format("Invalid orderStatus value for id: [%s]. Expected one of values: %s",
                        purchaseOrderToUpdate.getWherePurchaseOrderId(), Arrays.toString(OrderStatusEnum.values())), GraphQLErrorTypeCategory.OTHER);
            }
            switch (orderStatus){
            case SHIPPED, IN_PROGRESS: break;
            default: throw new GraphQLRequestException(String.format("Not allowed to set orderStatus to anything other " +
                    "than \"%s\" or \"%s\".", SHIPPED, IN_PROGRESS), GraphQLErrorTypeCategory.OTHER);
            }

            if(originalDatasetIds.contains(purchaseOrderToUpdate.getWherePurchaseOrderId())){
                throw new GraphQLRequestException(String.format("Not allowed to update the main dataset in this demo. " +
                                "If you want to update a purchase-order, create a new one first and " +
                                "then update that one. Invalid update for id: [%s]",
                        purchaseOrderToUpdate.getWherePurchaseOrderId()),
                        GraphQLErrorTypeCategory.OTHER);
            }
        }
    }
}
