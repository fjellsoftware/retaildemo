/*
 * Â© 2023. This work is openly licensed via CC0 1.0.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */

package com.fjellsoftware.retaildemo.domain;

import com.fjellsoftware.retaildemo.Application;
import com.fjellsoftware.retaildemo.CoreDependencies;
import com.fjellsoftware.retaildemo.Metrics;
import com.fjellsoftware.retaildemo.authorizationcommon.HCaptchaVerifier;
import com.fjellsoftware.retaildemo.authorizationcommon.LoginSessionService;
import com.fjellsoftware.retaildemo.authorizationcommon.MutationFieldAndCookies;
import com.fjellsoftware.retaildemo.authorizationcommon.RateLimiter;
import com.fjellsoftware.retaildemo.autogenerated.graphql.customer.*;
import com.fjellsoftware.retaildemo.autogenerated.orm.main.*;
import io.loppi.graphql.integration.orm.table.GraphQLTableConfiguration;
import io.loppi.graphql.integration.orm.table.query.GraphQLTablePluralQueryConfiguration;
import io.loppi.graphql.integration.orm.table.query.GraphQLTableQueriesConfiguration;
import io.loppi.graphql.outputobjecttypes.IgnoredResultType;
import io.loppi.orm.includablevalues.StringValue;
import io.loppi.orm.includablevalues.UUIDValue;
import io.loppi.orm.*;
import io.loppi.graphql.*;
import io.loppi.graphql.schema.*;
import com.fjellsoftware.javafunctionalutils.ImmutableList;
import com.fjellsoftware.retaildemo.authorizationcommon.userinfo.AuthenticatedUser;
import com.fjellsoftware.retaildemo.authorizationcommon.userinfo.CaptchaUser;
import com.fjellsoftware.retaildemo.authorizationcommon.userinfo.UserInfo;
import com.fjellsoftware.retaildemo.authorizationcommon.cookie.CookieModification;
import com.fjellsoftware.retaildemo.authorizationcommon.cookie.CookieToAdd;
import com.fjellsoftware.retaildemo.authorizationcommon.cookie.CookieToRemove;
import io.loppi.orm.metamodel.attribute.Attribute;
import io.loppi.orm.query.QueryExecutionPluralResult;
import io.loppi.orm.query.TableQuery;

import java.net.InetAddress;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;
import java.util.List;
import java.util.Set;
import java.util.UUID;

public class LoginSessionDomain {

    private final RetailDemoORMService loppiService;
    private final LoginSessionService loginSessionService;
    private final RateLimiter rateLimiter;
    private final MessageDigest sha256Digest;
    private final CustomerGraphQLService customerGraphQLService;

    public LoginSessionDomain(
            RetailDemoORMService loppiService, LoginSessionService loginSessionService, RateLimiter rateLimiter,
            MessageDigest sha256Digest, CustomerGraphQLService customerGraphQLService) {
        this.loppiService = loppiService;
        this.loginSessionService = loginSessionService;
        this.rateLimiter = rateLimiter;
        this.sha256Digest = sha256Digest;
        this.customerGraphQLService = customerGraphQLService;
    }

    public static GraphQLOutputFieldDefinition createLoginOrdinaryMutationDefinition(){
        GraphQLOutputFieldDefinition succeededField = GraphQLOutputFieldDefinition.builder().setName("succeeded")
                .setNotNull(true).setType(GraphQLScalarTypeCategory.Boolean).build();
        GraphQLOutputFieldDefinition tooManyAttemptsField = GraphQLOutputFieldDefinition.builder().setName("tooManyAttempts")
                .setNotNull(true).setType(GraphQLScalarTypeCategory.Boolean).build();
        GraphQLOutputObjectType loginResult = GraphQLOutputObjectType.builder().setName("LoginResult")
                .setFields(List.of(succeededField, tooManyAttemptsField)).build();

        GraphQLInputFieldDefinition usernameArgument = GraphQLInputFieldDefinition.builder().setName("username")
                .setType(GraphQLScalarTypeCategory.String).setNotNull(true).build();
        GraphQLInputFieldDefinition passwordBcryptArgument = GraphQLInputFieldDefinition.builder().setName("passwordBcrypt")
                .setType(GraphQLScalarTypeCategory.String).setNotNull(true).build();
        return GraphQLOutputFieldDefinition.builder().setName("login")
                .setDescription(String.format("Login to the service. Requires solved captcha, with token sent via " +
                        "cookie \"%s\". Also requires password to be hashed using bcrypt and the salt from " +
                        "the \"%s\" field. If login is successful the response will include a " +
                        "set-cookie for \"%s\". After four unsuccessful username/password combinations, " +
                        "you need to solve captcha again.", HCaptchaVerifier.H_CAPTCHA_TOKEN_COOKIE_NAME,
                        CoreDependencies.GET_BCRYPT_SALT_FIELD_NAME,
                        Application.SESSION_TOKEN_COOKIE_NAME))
                .setType(loginResult)
                .setNotNull(true)
                .setArguments(List.of(usernameArgument, passwordBcryptArgument))
                .build();
    }

    public static GraphQLOutputFieldDefinition createSignOutOrdinaryMutationDefinition(){
        return GraphQLOutputFieldDefinition.builder().setName("signOut")
                .setDescription("Signs out of the service.")
                .setType(IgnoredResultType.get())
                .setNotNull(true).build();
    }

    public MutationFieldAndCookies handleSignOut(
            UserInfo userInfo, SignOutMutationField signOut)
            throws GraphQLRequestException {
        if(!(userInfo instanceof AuthenticatedUser authenticatedUser)){
            throw GraphQLRequestException.createNotLoggedIn();
        }
        LoginSessionToUpdate userSessionToUpdate = new LoginSessionToUpdate(authenticatedUser.sessionToken());
        userSessionToUpdate.setIsSignedOutIncludableOf(true);
        GraphQLExecutableMutationField parsedMutation =
                customerGraphQLService.resolveWithRowsMutationField(
                        new IgnoredResult(true), signOut, List.of(userSessionToUpdate));
        List<CookieModification> cookieModifications = List.of(new CookieToRemove(Application.SESSION_TOKEN_COOKIE_NAME));
        loginSessionService.invalidateSession(authenticatedUser.sessionToken());
        return new MutationFieldAndCookies(parsedMutation, cookieModifications);
    }

    public MutationFieldAndCookies handleLogin(
            UserInfo userInfo, LoginMutationField loginMutationField)
            throws GraphQLRequestException {
        if(userInfo instanceof AuthenticatedUser){
            throw new GraphQLRequestException("User already logged in.", GraphQLErrorTypeCategory.OTHER);
        }
        if(!(userInfo instanceof CaptchaUser captchaUser)) {
            throw new GraphQLRequestException("Invalid captcha token. " +
                    "Please go back and solve the captcha.", GraphQLErrorTypeCategory.OTHER);
        }
        String captchaToken = captchaUser.captchaToken();
        boolean wasConsumed = rateLimiter.checkCanConsumeLoginGraphQL(captchaToken);
        if(!wasConsumed){
            Metrics.incrementLoginError();
            LoginResult tooManyAttemptsResult = new LoginResult(false, true);
            GraphQLExecutableMutationField executableMutationField = customerGraphQLService
                    .resolveMutationField(tooManyAttemptsResult, loginMutationField);
            return new MutationFieldAndCookies(executableMutationField, List.of());
        }
        RetailDemoDatabaseService databaseServiceJDBC = loppiService.getDatabaseServiceJDBC();
        RetailDemoMeta meta = loppiService.getMeta();
        UserAccountMeta userAccountMeta = meta.getUserAccountMeta();
        LoginMutationInput loginInput = loginMutationField.input();
        String usernameInput = loginInput.username();
        TableQuery<UserAccountResult> query = databaseServiceJDBC.createTableQueryBuilder(userAccountMeta.getEntityMetadata(), 1)
                .includeScalar(userAccountMeta.userAccountId)
                .includeScalar(userAccountMeta.username)
                .includeScalar(userAccountMeta.hashedPassword)
                .includeScalar(userAccountMeta.role)
                .where().eq(userAccountMeta.username, usernameInput).end()
                .build();
        QueryExecutionPluralResult<UserAccountResult> queryResult;
        try {
            queryResult = databaseServiceJDBC.executeTableQuery(query);
        } catch (PostgresExecutionException e) {
            throw GraphQLRequestException.createInternal(e);
        }
        ImmutableList<UserAccountResult> fetchedUsers = queryResult.deserialize();
        if(fetchedUsers.isEmpty()){
            return loginFailed(userInfo.remoteAddress(), captchaToken, loginMutationField);
        }
        UserAccountResult user = fetchedUsers.iterator().next();
        String storedPassword = ((StringValue) user.getHashedPassword()).value();
        String passwordBcrypt = loginInput.passwordBcrypt();
        byte[] digest = sha256Digest.digest(passwordBcrypt.getBytes(StandardCharsets.UTF_8));
        String password_bcrypt_sha256_base64 = Base64.getEncoder().encodeToString(digest);
        boolean matches = storedPassword.equals(password_bcrypt_sha256_base64);
        if(!matches){
            return loginFailed(userInfo.remoteAddress(), captchaToken, loginMutationField);
        }
        UUID userId = ((UUIDValue) user.getUserAccountId()).value();
        UUID sessionId = UUID.randomUUID();
        LoginSessionToInsert userSessionToInsert = new LoginSessionToInsert(new RetailDemoIdReferenceUUID(userId));
        userSessionToInsert.setLoginSessionIdIncludableOf(sessionId);
        GraphQLExecutableMutationField mutationField = customerGraphQLService.resolveWithRowsMutationField(
                        new LoginResult(true, false), loginMutationField, List.of(userSessionToInsert));
        CookieToAdd loginSessionCookie = new CookieToAdd(Application.SESSION_TOKEN_COOKIE_NAME, sessionId.toString());
        Metrics.incrementLoginSuccess();
        return new MutationFieldAndCookies(mutationField, List.of(loginSessionCookie));
    }

    private MutationFieldAndCookies loginFailed(
            InetAddress remoteAddress, String captchaToken, LoginMutationField loginMutationField) {
        Metrics.incrementLoginError();
        rateLimiter.consumeLoginFailedGraphQL(remoteAddress, captchaToken);
        LoginResult failedLoginResult = new LoginResult(false, false);
        GraphQLExecutableMutationField executableMutationField =
                customerGraphQLService.resolveMutationField(failedLoginResult, loginMutationField);
        return new MutationFieldAndCookies(executableMutationField, List.of());
    }

    public static GraphQLTableConfiguration<LoginSessionResult> createStaffApiTableConfiguration(
            LoginSessionMeta loginSessionMeta) {
        Set<Attribute<LoginSessionResult, ?>> outputAttributes = Set.of(loginSessionMeta.createdAt,
                loginSessionMeta.userAccount, loginSessionMeta.isSignedOut, loginSessionMeta.lastUpdatedAt);
        GraphQLTablePluralQueryConfiguration<LoginSessionResult> pluralQueryFieldConfiguration =
                new GraphQLTablePluralQueryConfiguration<LoginSessionResult>()
                .setIncludeField(true)
                .setIncludeOrderBy(Set.of(loginSessionMeta.createdAt, loginSessionMeta.lastUpdatedAt))
                .setIncludeWhere(Set.of(loginSessionMeta.isSignedOut, loginSessionMeta.createdAt,
                        loginSessionMeta.lastUpdatedAt, loginSessionMeta.userAccountId))
                .setPluralFieldDescription("Returns all login sessions from all users.");
        GraphQLTableQueriesConfiguration<LoginSessionResult> queriesConfiguration =
                new GraphQLTableQueriesConfiguration<>(outputAttributes)
                        .setIncludePluralTableQuery(pluralQueryFieldConfiguration);
        return new GraphQLTableConfiguration<>(loginSessionMeta.getEntityMetadata())
                .setIncludeQueries(queriesConfiguration);
    }
}
