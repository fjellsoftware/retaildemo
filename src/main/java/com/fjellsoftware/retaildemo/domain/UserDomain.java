/*
 * Â© 2023. This work is openly licensed via CC0 1.0.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */

package com.fjellsoftware.retaildemo.domain;

import com.fjellsoftware.bcryptclientsalt.BCryptClientSalt;
import com.fjellsoftware.javafunctionalutils.ImmutableList;
import com.fjellsoftware.retaildemo.Application;
import com.fjellsoftware.retaildemo.CoreDependencies;
import com.fjellsoftware.retaildemo.authorizationcommon.HCaptchaCache;
import com.fjellsoftware.retaildemo.authorizationcommon.HCaptchaVerifier;
import com.fjellsoftware.retaildemo.authorizationcommon.MutationFieldAndCookies;
import com.fjellsoftware.retaildemo.authorizationcommon.cookie.CookieToAdd;
import com.fjellsoftware.retaildemo.authorizationcommon.userinfo.AuthenticatedUser;
import com.fjellsoftware.retaildemo.authorizationcommon.userinfo.CaptchaUser;
import com.fjellsoftware.retaildemo.authorizationcommon.userinfo.UserInfo;
import com.fjellsoftware.retaildemo.autogenerated.graphql.customer.*;
import com.fjellsoftware.retaildemo.autogenerated.orm.main.*;
import io.loppi.graphql.GraphQLExecutableMutationField;
import io.loppi.graphql.GraphQLExecutableQueryField;
import io.loppi.graphql.GraphQLRequestException;
import io.loppi.graphql.integration.orm.table.GraphQLTableConfiguration;
import io.loppi.graphql.integration.orm.table.query.GraphQLTablePluralQueryConfiguration;
import io.loppi.graphql.integration.orm.table.query.GraphQLTableQueriesConfiguration;
import io.loppi.graphql.integration.orm.table.query.argumentbuilder.GraphQLTableQueryArgumentBuilder;
import io.loppi.graphql.outputobjecttypes.IgnoredResultType;
import io.loppi.graphql.schema.*;
import io.loppi.orm.PostgresExecutionException;
import io.loppi.orm.metamodel.attribute.Attribute;
import io.loppi.orm.query.QueryExecutionPluralResult;
import io.loppi.orm.query.TableQuery;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.Base64;
import java.util.List;
import java.util.Set;
import java.util.UUID;

public class UserDomain {

    private final RetailDemoORMService loppiService;
    private final UserAccountMeta userAccountMeta;
    private final MessageDigest sha256Digest;
    private final HCaptchaCache hCaptchaCache;
    private final CustomerGraphQLService customerGraphQLService;
    private final String hostName;

    public UserDomain(RetailDemoORMService loppiService, UserAccountMeta userAccountMeta,
                      HCaptchaCache hCaptchaCache, MessageDigest sha256Digest,
                      CustomerGraphQLService customerGraphQLService, String hostName) {
        this.loppiService = loppiService;
        this.userAccountMeta = userAccountMeta;
        this.hCaptchaCache = hCaptchaCache;
        this.sha256Digest = sha256Digest;
        this.customerGraphQLService = customerGraphQLService;
        this.hostName = hostName;
    }

    private static final String apiBaseName = "User";
    private static final String apiPluralName = "Users";
    public static GraphQLTableConfiguration<UserAccountResult> createCustomerApiTableConfiguration(
            UserAccountMeta userAccountMeta){
        Set<Attribute<UserAccountResult, ?>> outputAttributes = Set.of(userAccountMeta.userAccountId,
                userAccountMeta.name, userAccountMeta.username, userAccountMeta.createdAt, userAccountMeta.role);

        GraphQLTablePluralQueryConfiguration<UserAccountResult> pluralQueryFieldConfiguration =
                new GraphQLTablePluralQueryConfiguration<UserAccountResult>()
                .setIncludeField(true)
                .setPluralFieldNameOverride("tryCurrentUser")
                .setPluralFieldDescription("If logged in, this returns a list with one user which is the " +
                        "current user, otherwise this returns an empty list.");
        GraphQLTableQueriesConfiguration<UserAccountResult> queriesConfiguration =
                new GraphQLTableQueriesConfiguration<>(outputAttributes)
                        .setIncludePluralTableQuery(pluralQueryFieldConfiguration);
        return new GraphQLTableConfiguration<>(userAccountMeta.getEntityMetadata())
                .setIncludeQueries(queriesConfiguration)
                .addFieldNameAttributeOverride(userAccountMeta.hashedPassword, "password")
                .setTypeName(apiBaseName, apiPluralName);
    }

    public static GraphQLOutputFieldDefinition createUpdatePasswordOrdinaryMutationDefinition(){
        GraphQLInputFieldDefinition previousPasswordArgument = GraphQLInputFieldDefinition.builder()
                .setName("previousPassword").setNotNull(true)
                .setType(GraphQLScalarTypeCategory.String).build();
        GraphQLInputFieldDefinition updatedPasswordArgument = GraphQLInputFieldDefinition.builder()
                .setName("updatedPassword").setNotNull(true)
                .setType(GraphQLScalarTypeCategory.String).build();

        return GraphQLOutputFieldDefinition.builder().setName("updatePassword")
                .setDescription("Currently not supported.")
                .setNotNull(true).setType(IgnoredResultType.get())
                .setArguments(List.of(previousPasswordArgument, updatedPasswordArgument)).build();
    }

    public static GraphQLOutputFieldDefinition createSignUpOrdinaryMutationDefiniton(){
        GraphQLInputFieldDefinition nameArgument = GraphQLInputFieldDefinition.builder().setName("name").setNotNull(true)
                .setType(GraphQLScalarTypeCategory.String).build();
        GraphQLInputFieldDefinition usernameArgument = GraphQLInputFieldDefinition.builder().setName("username").setNotNull(true)
                .setType(GraphQLScalarTypeCategory.String).build();
        GraphQLInputFieldDefinition passwordBcryptArgument = GraphQLInputFieldDefinition.builder().setName("passwordBcrypt").setNotNull(true)
                .setType(GraphQLScalarTypeCategory.String).build();

        GraphQLOutputFieldDefinition successfulField = GraphQLOutputFieldDefinition.builder().setName("succeeded")
                .setType(GraphQLScalarTypeCategory.Boolean).setNotNull(true).build();
        GraphQLOutputFieldDefinition usernameTakenField = GraphQLOutputFieldDefinition.builder().setName("usernameTaken")
                .setType(GraphQLScalarTypeCategory.Boolean).setNotNull(true).build();
        GraphQLOutputObjectType signUpResultType = GraphQLOutputObjectType.builder().setName("SignUpResult")
                .addField(successfulField)
                .addField(usernameTakenField)
                .build();
        return GraphQLOutputFieldDefinition.builder().setName("signUp")
                .setDescription(String.format("Signs up for the service. Requires solved captcha, with token sent via cookie \"%s\". " +
                        "Also requires password to be hashed using bcrypt and the salt from the \"%s\" field.",
                                HCaptchaVerifier.H_CAPTCHA_TOKEN_COOKIE_NAME, CoreDependencies.GET_BCRYPT_SALT_FIELD_NAME))
                .setNotNull(true)
                .setType(signUpResultType)
                .setArguments(List.of(nameArgument, usernameArgument, passwordBcryptArgument)).build();
    }

    public GraphQLExecutableQueryField applyCustomerAccessControlForUserQuery(
            TryCurrentUserQueryField tryCurrentUserQueryField, UserInfo userInfo) {
        UUID accountId = UUID.randomUUID();
        if (userInfo instanceof AuthenticatedUser authenticatedUser) {
            accountId = authenticatedUser.userId();
        }
        return GraphQLTableQueryArgumentBuilder.from(tryCurrentUserQueryField)
                .where().eq(userAccountMeta.userAccountId, accountId).end()
                .build();
    }

    public MutationFieldAndCookies handleSignUp(
            UserInfo userInfo, SignUpMutationField mutationField) throws GraphQLRequestException {
        if(userInfo instanceof AuthenticatedUser){
            throw new GraphQLRequestException("Not allowed to sign up while signed in.", GraphQLErrorTypeCategory.OTHER);
        }
        if(!(userInfo instanceof CaptchaUser captchaUser)) {
            throw new GraphQLRequestException("Invalid captcha token. " +
                    "Please go back and solve the captcha.", GraphQLErrorTypeCategory.OTHER);
        }
        boolean isValid = hCaptchaCache.checkTokenValidForSignUp(captchaUser.captchaToken());
        if(!isValid){
            throw new GraphQLRequestException("Captcha token already used for sign-up. Solve captcha again.",
                    GraphQLErrorTypeCategory.APPLICATION_VALIDATION);
        }
        SignUpMutationInput input = mutationField.input();
        String name = input.name();
        if (!name.equals("John Doe")) {
            throw new GraphQLRequestException("User must be called John Doe in this demo.", GraphQLErrorTypeCategory.OTHER);
        }

        String username = input.username();
        int numberOfRandomDigits = 8;
        String usernameStart = "john.doe_";
        String usernameEnd = username.substring(usernameStart.length());
        boolean validEndDigits = false;
        try {
            Integer.parseInt(usernameEnd);
            validEndDigits = true;
        }catch (Exception e){}
        boolean usernameIsCorrect = username.length() == usernameStart.length() + numberOfRandomDigits
                && username.startsWith(usernameStart) && validEndDigits;
        if (!usernameIsCorrect) {
            throw new GraphQLRequestException(String.format("Username must be [%s] followed by 8 digits in this demo.",
                    usernameStart), GraphQLErrorTypeCategory.OTHER);
        }
        String passwordBcrypt = input.passwordBcrypt();
        int maximumPasswordLength = 100;
        if(passwordBcrypt.length() > maximumPasswordLength){
            throw new GraphQLRequestException(String.format("Password too long. Maximum length is [%s]",
                    maximumPasswordLength), GraphQLErrorTypeCategory.OTHER);
        }
        String expectedSalt = BCryptClientSalt.fromServiceIdentifierAndUsername(hostName, username);
        if(!passwordBcrypt.startsWith(expectedSalt)){
            throw new GraphQLRequestException("Expected the password to be hashed using BCrypt, and the " +
                    "salt to be from the graphql getBcryptSalt mutation field, but the salt found was incorrect.",
                    GraphQLErrorTypeCategory.APPLICATION_VALIDATION);
        }
        RetailDemoDatabaseService databaseServiceJDBC = loppiService.getDatabaseServiceJDBC();
        TableQuery<UserAccountResult> query = databaseServiceJDBC.createTableQueryBuilder(userAccountMeta.getEntityMetadata(), 1)
                .includeScalar(userAccountMeta.userAccountId)
                .where().eq(userAccountMeta.username, username).end()
                .build();
        QueryExecutionPluralResult<UserAccountResult> queryResult;
        try {
            queryResult = databaseServiceJDBC.executeTableQuery(query);
        } catch (PostgresExecutionException e) {
            throw GraphQLRequestException.createInternal(e);
        }
        ImmutableList<UserAccountResult> fetchedUsers = queryResult.deserialize();
        if(!fetchedUsers.isEmpty()){
            GraphQLExecutableMutationField executableMutationField = customerGraphQLService
                    .resolveMutationField(new SignUpResult(false, true), mutationField);
            return new MutationFieldAndCookies(executableMutationField, List.of());
        }
        byte[] digest = sha256Digest.digest(passwordBcrypt.getBytes(StandardCharsets.UTF_8));
        String password_bcrypt_sha256_base64 = Base64.getEncoder().encodeToString(digest);
        UserAccountToInsert userAccountToInsert = new UserAccountToInsert(name, username, password_bcrypt_sha256_base64);

        UUID sessionId = UUID.randomUUID();
        LoginSessionToInsert userSessionToInsert = new LoginSessionToInsert(userAccountToInsert);
        userSessionToInsert.setLoginSessionIdIncludableOf(sessionId);
        CookieToAdd loginSessionCookie = new CookieToAdd(Application.SESSION_TOKEN_COOKIE_NAME, sessionId.toString());
        GraphQLExecutableMutationField executableMutationField =
                customerGraphQLService.resolveWithRowsMutationField(
                new SignUpResult(true, false), mutationField, List.of(userAccountToInsert, userSessionToInsert));
        hCaptchaCache.consumeTokenForSignUp(captchaUser.captchaToken());
        return new MutationFieldAndCookies(executableMutationField, List.of(loginSessionCookie));
    }

    public MutationFieldAndCookies handleUpdatePassword(
            UserInfo userInfo, UpdatePasswordMutationField updatePassword)
            throws GraphQLRequestException {
        throw new GraphQLRequestException("Password reset is not supported in this demo.", GraphQLErrorTypeCategory.OTHER);
    }

    public static GraphQLTableConfiguration<UserAccountResult> createStaffApiTableConfiguration(
            UserAccountMeta userAccountMeta) {
        Set<Attribute<UserAccountResult, ?>> outputAttributes = Set.of(userAccountMeta.userAccountId,
                userAccountMeta.name, userAccountMeta.username, userAccountMeta.createdAt,
                userAccountMeta.lastUpdatedAt, userAccountMeta.role, userAccountMeta.loginSessions);
        GraphQLTablePluralQueryConfiguration<UserAccountResult> pluralQueryFieldConfiguration =
                new GraphQLTablePluralQueryConfiguration<UserAccountResult>()
                .setIncludeField(true)
                .setIncludeWhere(Set.of(userAccountMeta.username, userAccountMeta.userAccountId, userAccountMeta.name,
                        userAccountMeta.role))
                .setIncludeOrderBy(Set.of(userAccountMeta.userAccountId, userAccountMeta.createdAt,
                        userAccountMeta.lastUpdatedAt))
                .setPluralFieldDescription("Returns all registered users.");
        GraphQLTableQueriesConfiguration<UserAccountResult> queriesConfiguration =
                new GraphQLTableQueriesConfiguration<>(outputAttributes)
                .setIncludePluralTableQuery(pluralQueryFieldConfiguration);
        return new GraphQLTableConfiguration<>(userAccountMeta.getEntityMetadata())
                .setIncludeQueries(queriesConfiguration)
                .setTypeName(apiBaseName, apiPluralName);
    }
}
