/*
 * Â© 2023. This work is openly licensed via CC0 1.0.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */

package com.fjellsoftware.retaildemo.graphqlexecutor;


import com.fjellsoftware.javafunctionalutils.ImmutableList;
import com.fjellsoftware.retaildemo.Metrics;
import com.fjellsoftware.retaildemo.authorizationcommon.BCryptSalter;
import com.fjellsoftware.retaildemo.authorizationcommon.HCaptchaVerifier;
import com.fjellsoftware.retaildemo.authorizationcommon.MutationFieldAndCookies;
import com.fjellsoftware.retaildemo.authorizationcommon.RateLimiter;
import com.fjellsoftware.retaildemo.authorizationcommon.cookie.CookieModification;
import com.fjellsoftware.retaildemo.authorizationcommon.userinfo.UserInfo;
import com.fjellsoftware.retaildemo.autogenerated.graphql.customer.*;
import com.fjellsoftware.retaildemo.demo.DemoDomain;
import com.fjellsoftware.retaildemo.domain.Domains;
import com.fjellsoftware.retaildemo.domain.LoginSessionDomain;
import com.fjellsoftware.retaildemo.domain.OrderDomain;
import com.fjellsoftware.retaildemo.domain.UserDomain;
import io.loppi.graphql.*;
import io.loppi.graphql.schema.GraphQLErrorTypeCategory;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class GraphQLExecutorCustomer {

    private final CustomerGraphQLService customerGraphQLService;
    private final GraphQLService graphQLService;
    private final UserDomain userDomain;
    private final DemoDomain demoDomain;
    private final LoginSessionDomain loginSessionDomain;
    private final OrderDomain orderDomain;
    private final RateLimiter rateLimiter;
    private final HCaptchaVerifier captchaVerifier;
    private final BCryptSalter bCryptSalter;

    public GraphQLExecutorCustomer(
            CustomerGraphQLService customerGraphQLService, GraphQLService graphQLService, Domains domains,
            RateLimiter rateLimiter,
            HCaptchaVerifier captchaVerifier, BCryptSalter bCryptSalter){
        this.customerGraphQLService = customerGraphQLService;
        this.graphQLService = graphQLService;
        this.userDomain = domains.getUserdomain();
        this.demoDomain = domains.getDemoDomain();
        this.loginSessionDomain = domains.getLoginSessionDomain();
        this.orderDomain = domains.getOrderDomain();
        this.rateLimiter = rateLimiter;
        this.captchaVerifier = captchaVerifier;
        this.bCryptSalter = bCryptSalter;
    }

    public ExecutionResultAndCookies tryParseAndExecute(String fullquery, UserInfo userInfo){
        try {
            return parseAndExecute(fullquery, userInfo);
        } catch (GraphQLRequestException e) {
            return new ExecutionResultAndCookies(e, Collections.emptyList());
        }
    }

    private ExecutionResultAndCookies parseAndExecute(String fullQuery, UserInfo userInfo) throws GraphQLRequestException {
        CustomerRequest graphQLRequest = customerGraphQLService.parseAndValidate(fullQuery);
        return switch (graphQLRequest){
        case CustomerQueryRequest queryRequest -> {
            ExecutionResultAndCookies executionResultAndCookies = executeQuery(queryRequest, userInfo);
            GraphQLExecutionResult executionResult = executionResultAndCookies.executionResult;
            if(executionResult instanceof GraphQLExecutionDataResult){
                Metrics.incrementMetric(Metrics.Kind.CUSTOMER_QUERIES_SUCCESS);
            }
            else{
                Metrics.incrementMetric(Metrics.Kind.CUSTOMER_QUERIES_ERROR);
            }
            yield executionResultAndCookies;
        }
        case CustomerMutationRequest mutationRequest -> {
            ExecutionResultAndCookies executionResultAndCookies = executeMutation(mutationRequest, userInfo);
            GraphQLExecutionResult executionResult = executionResultAndCookies.executionResult;
            if(executionResult instanceof GraphQLExecutionDataResult){
                Metrics.incrementMetric(Metrics.Kind.CUSTOMER_MUTATIONS_SUCCESS);
                for (CustomerMutationRootField rootField : mutationRequest.rootFields()) {
                    if (rootField instanceof PlaceOrderMutationField) {
                        Metrics.incrementMetric(Metrics.Kind.PURCHASE_ORDER_SUCCESS);
                    }
                }
            }
            else{
                Metrics.incrementMetric(Metrics.Kind.CUSTOMER_MUTATIONS_ERROR);
            }
            yield executionResultAndCookies;
        }
        };
    }

    private ExecutionResultAndCookies executeQuery(CustomerQueryRequest queryRequest, UserInfo userInfo)
    throws GraphQLRequestException {
        List<GraphQLExecutableQueryField> queriesAfterAccessControl = new ArrayList<>();
        rateLimiter.consumeRegularGraphQL(userInfo.remoteAddress(), queryRequest.rootFields().size());
        for (CustomerQueryRootField queryRootField : queryRequest.rootFields()) {
            GraphQLExecutableQueryField queryAfterAccessControl = switch (queryRootField){
                case CustomerIntrospectionRootField introspectionQuery -> introspectionQuery;
                case CustomerTableQueryRootField databaseQuery -> applyAccessControlToTableQuery(databaseQuery, userInfo);
            };
            queriesAfterAccessControl.add(queryAfterAccessControl);
        }
        GraphQLExecutionResult graphQLExecutionResult = graphQLService.executeQuery(queriesAfterAccessControl);
        return new ExecutionResultAndCookies(graphQLExecutionResult, Collections.emptyList());
    }

    private GraphQLExecutableQueryField applyAccessControlToTableQuery(
            CustomerTableQueryRootField tableQueryRootField, UserInfo userInfo) throws GraphQLRequestException {
        return switch (tableQueryRootField) {
        case TryCurrentUserQueryField tryCurrentUserQueryField ->
                userDomain.applyCustomerAccessControlForUserQuery(tryCurrentUserQueryField, userInfo);
        case ProductsQueryField productsQueryField -> productsQueryField;
        case OrdersQueryField ordersQueryField ->
                orderDomain.applyAccessControlCustomerQuery(ordersQueryField, userInfo);
        };
    }

    private ExecutionResultAndCookies executeMutation(
            CustomerMutationRequest mutationRequest, UserInfo userInfo)
            throws GraphQLRequestException {
        CustomerMutationRootField mutationField =
                checkOnlyOneMutation(mutationRequest);
        rateLimiter.consumeRegularGraphQL(userInfo.remoteAddress(), 3);
        MutationFieldAndCookies authorized = switch (mutationField) {
            case SignOutMutationField signOut ->
                    loginSessionDomain.handleSignOut(userInfo, signOut);
            case PlaceOrderMutationField placeOrderMutationField ->
                    orderDomain.handlePlaceOrder(userInfo, placeOrderMutationField);
            case LoginMutationField login ->
                    loginSessionDomain.handleLogin(userInfo, login);
            case SignUpMutationField signUp ->
                    userDomain.handleSignUp(userInfo, signUp);
            case VerifyCaptchaMutationField verifyCaptchaField ->
                    captchaVerifier.verifyHCaptchaTokenMutation(verifyCaptchaField);
            case UpdatePasswordMutationField updatePassword ->
                    userDomain.handleUpdatePassword(userInfo, updatePassword);
            case DemoUpgradeToStaffMutationField upgradeToStaff ->
                    demoDomain.applyUpgradeToStaff(userInfo, upgradeToStaff);
            case DemoDowngradeToCustomerMutationField downgradeToCustomer ->
                    demoDomain.applyDowngradeToCustomer(userInfo, downgradeToCustomer);
            case GetBcryptSaltMutationField getBcryptSaltField ->
                    bCryptSalter.handleGraphQLGetBcryptSalt(getBcryptSaltField);
        };
        GraphQLExecutionResult executionResult =
                graphQLService.executeMutation(List.of(authorized.mutationField()));
        List<CookieModification> cookies = authorized.cookiesToModify();
        return new ExecutionResultAndCookies(executionResult, cookies);
    }

    public record ExecutionResultAndCookies(GraphQLExecutionResult executionResult, List<CookieModification> cookiesToModify) {}

    private CustomerMutationRootField checkOnlyOneMutation(CustomerMutationRequest mutationRequest) throws GraphQLRequestException {
        ImmutableList<CustomerMutationRootField> mutationFields = mutationRequest.rootFields();
        if (mutationFields.size() > 1) {
            throw new GraphQLRequestException("Multiple mutation root fields in the same request is not allowed in this demo.",
                    GraphQLErrorTypeCategory.APPLICATION_VALIDATION);
        }
        if(mutationFields.isEmpty()){
            throw GraphQLRequestException.createInternal();
        }
        return mutationFields.iterator().next();
    }
}
