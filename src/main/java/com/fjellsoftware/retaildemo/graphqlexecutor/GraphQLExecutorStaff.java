/*
 * Â© 2023. This work is openly licensed via CC0 1.0.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */

package com.fjellsoftware.retaildemo.graphqlexecutor;


import com.fjellsoftware.javafunctionalutils.ImmutableList;
import com.fjellsoftware.retaildemo.Metrics;
import com.fjellsoftware.retaildemo.autogenerated.graphql.staff.*;
import com.fjellsoftware.retaildemo.domain.Domains;
import com.fjellsoftware.retaildemo.domain.OrderDomain;
import com.fjellsoftware.retaildemo.domain.ProductDomain;
import io.loppi.graphql.*;
import com.fjellsoftware.retaildemo.authorizationcommon.RateLimiter;
import com.fjellsoftware.retaildemo.authorizationcommon.userinfo.AuthenticatedUser;
import com.fjellsoftware.retaildemo.authorizationcommon.RoleEnum;
import com.fjellsoftware.retaildemo.authorizationcommon.userinfo.UserInfo;

import java.util.ArrayList;
import java.util.List;

public class GraphQLExecutorStaff {
    private final StaffGraphQLService staffGraphQLService;
    private final GraphQLService graphQLService;
    private final OrderDomain orderDomain;
    private final ProductDomain productDomain;
    private final RateLimiter rateLimiter;

    public GraphQLExecutorStaff(
            StaffGraphQLService staffGraphQLService, GraphQLService graphQLService, Domains domains,
            RateLimiter rateLimiter) {
        this.staffGraphQLService = staffGraphQLService;
        this.graphQLService = graphQLService;
        this.orderDomain = domains.getOrderDomain();
        this.productDomain = domains.getProductDomain();
        this.rateLimiter = rateLimiter;
    }

    public GraphQLExecutionResult tryParseAndExecute(String fullQuery, UserInfo userInfo){
        try {
            return parseAndExecute(fullQuery, userInfo);
        } catch (GraphQLRequestException e) {
            return e;
        }
    }

    private GraphQLExecutionResult parseAndExecute(String fullQuery, UserInfo userInfo) throws GraphQLRequestException {
        if (!(userInfo instanceof AuthenticatedUser authenticatedUser)) {
            throw GraphQLRequestException.createNotLoggedIn();
        }
        if (!authenticatedUser.role().equals(RoleEnum.STAFF)) {
            throw GraphQLRequestException.createNotAuthorized();
        }
        StaffRequest graphQLRequest = staffGraphQLService.parseAndValidate(fullQuery);
        return switch (graphQLRequest) {
        case StaffQueryRequest queryRequest -> {
            GraphQLExecutionResult graphQLExecutionResult = executeQuery(userInfo, queryRequest);
            if(graphQLExecutionResult instanceof GraphQLExecutionDataResult){
                Metrics.incrementMetric(Metrics.Kind.STAFF_QUERIES_SUCCESS);
            }
            else{
                Metrics.incrementMetric(Metrics.Kind.STAFF_QUERIES_ERROR);
            }
            yield graphQLExecutionResult;
        }
        case StaffMutationRequest mutationRequest -> {
            GraphQLExecutionResult graphQLExecutionResult = executeMutation(mutationRequest, userInfo);
            if(graphQLExecutionResult instanceof GraphQLExecutionDataResult){
                Metrics.incrementMetric(Metrics.Kind.STAFF_MUTATIONS_SUCCESS);
            }
            else{
                Metrics.incrementMetric(Metrics.Kind.STAFF_MUTATIONS_ERROR);
            }
            yield graphQLExecutionResult;
        }
        };
    }

    private GraphQLExecutionResult executeQuery(UserInfo userInfo, StaffQueryRequest queryRequest)
    throws GraphQLRequestException {
        ImmutableList<StaffQueryRootField> rootFields = queryRequest.rootFields();
        rateLimiter.consumeRegularGraphQL(userInfo.remoteAddress(), rootFields.size());
        List<GraphQLExecutableQueryField> executableQueryFields = new ArrayList<>();
        for (StaffQueryRootField rootField : rootFields) {
            switch (rootField) {
            case StaffIntrospectionRootField staffIntrospectionRootField ->
                    executableQueryFields.add(staffIntrospectionRootField);
            case UsersQueryField usersQueryField ->
                    executableQueryFields.add(usersQueryField);
            case OrdersQueryField ordersQueryField ->
                    executableQueryFields.add(ordersQueryField);
            case LoginSessionsQueryField loginSessionsQueryField ->
                    executableQueryFields.add(loginSessionsQueryField);
            }
        }
        return graphQLService.executeQuery(executableQueryFields);
    }

    private GraphQLExecutionResult executeMutation(
            StaffMutationRequest graphQLMutationRequest, UserInfo userInfo) throws GraphQLRequestException {
        ImmutableList<StaffMutationRootField> rootFields = graphQLMutationRequest.rootFields();
        List<GraphQLExecutableMutationField> executableFields = new ArrayList<>();
        rateLimiter.consumeRegularGraphQL(userInfo.remoteAddress(), 3 * rootFields.size());
        for (StaffMutationRootField rootField : rootFields) {
            GraphQLExecutableMutationField executableMutationField =
            switch (rootField) {
            case OrderStatusBatchUpdateMutationField orderStatusBatchUpdateMutationField -> {
                orderDomain.checkStaffUpdateOrderStatuses(orderStatusBatchUpdateMutationField);
                yield orderStatusBatchUpdateMutationField;
            }
            case ProductInsertMutationField productInsertMutationField -> {
                productDomain.handleProductInsert(productInsertMutationField);
                yield productInsertMutationField;
            }
            case ProductUpdateMutationField productUpdateMutationField -> {
                productDomain.handleProductUpdate(productUpdateMutationField);
                yield productUpdateMutationField;
            }
            };
            executableFields.add(executableMutationField);
        }
        return graphQLService.executeMutation(executableFields);
    }
}
