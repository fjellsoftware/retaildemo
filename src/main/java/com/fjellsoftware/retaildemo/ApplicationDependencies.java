/*
 * Â© 2023. This work is openly licensed via CC0 1.0.
 * https://creativecommons.org/publicdomain/zero/1.0/
 */

package com.fjellsoftware.retaildemo;

import com.fjellsoftware.retaildemo.authorizationcommon.*;

import com.fjellsoftware.retaildemo.autogenerated.orm.main.RetailDemoDatabaseService;
import com.fjellsoftware.retaildemo.autogenerated.orm.main.RetailDemoORMService;
import com.fjellsoftware.retaildemo.autogenerated.orm.main.RetailDemoMeta;
import com.fjellsoftware.retaildemo.demo.DemoGraphiQLLoader;
import com.fjellsoftware.retaildemo.domain.Domains;
import com.fjellsoftware.retaildemo.graphqlexecutor.GraphQLExecutorCustomer;
import com.fjellsoftware.retaildemo.graphqlexecutor.GraphQLExecutorStaff;
import com.fjellsoftware.retaildemo.util.FileUtils;
import com.zaxxer.hikari.HikariDataSource;
import io.loppi.graphql.GraphQLService;
import com.fjellsoftware.retaildemo.autogenerated.graphql.customer.CustomerGraphQLService;
import com.fjellsoftware.retaildemo.autogenerated.graphql.staff.StaffGraphQLService;


import java.security.MessageDigest;

public class ApplicationDependencies {

    private final CoreDependencies coreDependencies;
    private final Domains domains;
    private final LoginSessionService loginSessionService;
    private final CustomerGraphQLService customerGraphQLService;
    private final GraphQLExecutorCustomer graphQLExecutorCustomer;
    private final GraphQLExecutorStaff graphQLExecutorStaff;
    private final DemoGraphiQLLoader graphiQLLoader;
    private final RateLimiter rateLimiter;
    private final HCaptchaVerifier captchaVerifier;
    private final HCaptchaCache captchaCache;
    private final BCryptSalter bCryptSalter;
    private final Metrics metrics;

    ApplicationDependencies(ApplicationConfiguration configuration) {
        String hostName = configuration.getURI();
        this.coreDependencies = new CoreDependencies(configuration);
        RetailDemoORMService loppiService = coreDependencies.getLoppiService();
        RetailDemoDatabaseService databaseService = loppiService.getDatabaseServiceJDBC();
        RetailDemoMeta meta = loppiService.getMeta();
        GraphQLService customerGraphQLServiceRaw = coreDependencies.getCustomerGraphQLServiceRaw();
        GraphQLService staffGraphQLServiceRaw = coreDependencies.getStaffGraphQLServiceRaw();
        this.loginSessionService = createLoginSessionAuthenticationService(databaseService, meta);
        this.rateLimiter = new RateLimiter(configuration.isRateLimitEnabled());
        this.captchaCache = new HCaptchaCache();
        this.graphiQLLoader = new DemoGraphiQLLoader(rateLimiter, hostName, configuration);
        this.customerGraphQLService = new CustomerGraphQLService(customerGraphQLServiceRaw);
        StaffGraphQLService staffGraphQLService = new StaffGraphQLService(staffGraphQLServiceRaw);
        this.domains = createDomains(loppiService, loginSessionService, rateLimiter, captchaCache,
                CoreDependencies.sha256Digest, customerGraphQLService, hostName);
        this.graphQLExecutorStaff = createStaffGraphQLExecutor(staffGraphQLService, staffGraphQLServiceRaw, domains,
                rateLimiter);
        this.bCryptSalter = new BCryptSalter(customerGraphQLService, hostName);
        this.captchaVerifier = hCaptchaVerifier(configuration.getCredentialsDirectory(),
                configuration.isProduction(),
                customerGraphQLService, captchaCache);
        this.graphQLExecutorCustomer = createCustomerGraphQLExecutor(customerGraphQLService, customerGraphQLServiceRaw,
                domains, rateLimiter, captchaVerifier, bCryptSalter);
        this.metrics = new Metrics(loppiService);
    }

    private LoginSessionService createLoginSessionAuthenticationService(
            RetailDemoDatabaseService databaseService, RetailDemoMeta meta){
        return new LoginSessionService(databaseService, meta);
    }

    private Domains createDomains(
            RetailDemoORMService loppiService, LoginSessionService loginSessionService,
            RateLimiter rateLimiter, HCaptchaCache hCaptchaCache, MessageDigest sha256Digest,
            CustomerGraphQLService customerGraphQLService, String hostName){
        return new Domains(loppiService, loginSessionService, rateLimiter, hCaptchaCache, sha256Digest,
                customerGraphQLService, hostName);
    }

    private static final String hcaptcha_secret_fileName = "hcaptcha_secret";
    private HCaptchaVerifier hCaptchaVerifier(String credentialsDirectory,
            boolean isProduction, CustomerGraphQLService customerGraphQLService, HCaptchaCache hCaptchaCache){
        if(isProduction){
            String secret = FileUtils.loadFirstLineFromFile(credentialsDirectory, hcaptcha_secret_fileName);
            String siteKey = "ecc35242-96b3-49c5-8694-907723718636";
            return new HCaptchaVerifier(secret, siteKey, customerGraphQLService, hCaptchaCache);
        }
        // hCaptcha development secret/site-key
        else return new HCaptchaVerifier(
                "0x0000000000000000000000000000000000000000", "10000000-ffff-ffff-ffff-000000000001",
                customerGraphQLService, hCaptchaCache);
    }

    private GraphQLExecutorCustomer createCustomerGraphQLExecutor(
            CustomerGraphQLService customerGraphQLService, GraphQLService graphQLService, Domains domains,
            RateLimiter rateLimiter,
            HCaptchaVerifier hCaptchaVerifier, BCryptSalter bCryptSalter){
        return new GraphQLExecutorCustomer(customerGraphQLService, graphQLService, domains, rateLimiter,
                hCaptchaVerifier, bCryptSalter);
    }

    private GraphQLExecutorStaff createStaffGraphQLExecutor(
            StaffGraphQLService staffGraphQLService, GraphQLService graphQLService, Domains domains,
            RateLimiter rateLimiter){
        return new GraphQLExecutorStaff(staffGraphQLService, graphQLService, domains, rateLimiter);
    }

    public HikariDataSource getDataSource() {
        return coreDependencies.getDataSource();
    }

    public RetailDemoORMService getLoppiService() {
        return coreDependencies.getLoppiService();
    }

    public GraphQLService getCustomerGraphQLServiceRaw() {
        return coreDependencies.getCustomerGraphQLServiceRaw();
    }

    public GraphQLService getStaffGraphQLServiceRaw() {
        return coreDependencies.getStaffGraphQLServiceRaw();
    }

    public Domains getDomains() {
        return domains;
    }

    public LoginSessionService getLoginSessionAuthenticationService() {
        return loginSessionService;
    }

    public GraphQLExecutorCustomer getGraphQLExecutorCustomer(){
        return graphQLExecutorCustomer;
    }
    public GraphQLExecutorStaff getGraphQLExecutorStaff(){
        return graphQLExecutorStaff;
    }

    public DemoGraphiQLLoader getGraphiQLLoader() {
        return graphiQLLoader;
    }

    public RateLimiter getRateLimiter() {
        return rateLimiter;
    }

    public HCaptchaVerifier getCaptchaVerifier(){
        return captchaVerifier;
    }

    public HCaptchaCache getCaptchaCache() {
        return captchaCache;
    }

    public Metrics getMetrics() {
        return metrics;
    }
}
